% Generated by roxygen2 (4.0.2): do not edit by hand
\name{existsRegistryValue}
\alias{existsRegistryValue}
\title{Check Existence of Registry Value (generic)}
\usage{
existsRegistryValue(id, where = tryCatch(devtools::as.package(".")$package,
  error = function(cond) {     stop("Invalid default value for `where`") }),
  sub_id = character(), default = NULL, strict = c(0, 1, 2), ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like name/ID information.}

\item{where}{\strong{Signature argument}.
Object containing information about the location of the option container
that is to be used. Typically, this either corresponds to the name/ID
of a package/package project or an instance of a custom class for which
suitable methods in the context of managing options are defined
(see other methods of this package that have signature arguments
\code{id} or \code{where}).}

\item{sub_id}{\code{\link{character}}.
Optional ID for a sub layer. Useful for a hub-like option container
structure.}

\item{default}{\code{\link{ANY}}.
Value to be returned if option does not exist.
See \code{\link[base]{getOption}} and \code{\link[nestr]{getNested}}.}

\item{strict}{\code{\link{logical}}.
 Controls what happens when \code{id} points to a non-existing registry object:
\itemize{
     \item{0: }{ignore and return \code{FALSE} to signal that the
             assignment process was not successful or \code{fail_value} depending
             on the value of \code{return_status}}
         \item{1: }{ignore and with warning and return \code{FALSE}}
         \item{2: }{ignore and with error}
   }}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Checks if a registry object exists inside of the respective environment for
such information within an option container
based on a path-like \code{id} with the last ID component being the
actual object name that the function looks for.
See \code{\link[optionr]{getOptionContainer}}.
}
\section{Path-like identifiers}{


Values for \code{id} are expected to be of structure \code{a/b/c/.../z},
i.e. path-like identifiers using a slash as separator.
The identifier is transformed to \code{a$b$c$...$z} and then in turn to a
valid \emph{get} or \code{assign} expression
(i.e. something similar to \code{getOptionContainer(...)$a$b$c$...$z} and
\code{getOptionContainer(...)$a$b$c$...$z <- value}).
Of course, "atomic" paths (e.g. only \code{a}) are also valid.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Basics //
##------------------------------------------------------------------------------

setRegistryValue(id = "test", value = TRUE)
existsRegistryValue(id = "test")

setRegistryValue(id = "a/b/c", value = 10)
existsRegistryValue(id = "a")
existsRegistryValue(id = "a/b")
existsRegistryValue(id = "a/b/c")
existsRegistryValue(id = "a/b/c/d")

existsRegistryValue(id = "c")
existsRegistryValue(id = "c/d/e")
  
##------------------------------------------------------------------------------
## Strictness levels //
##------------------------------------------------------------------------------

## Empty ID //
existsRegistryValue(id = character())
try(existsRegistryValue(id = character(), strict = 1))
try(existsRegistryValue(id = character(), strict = 2))

## Not-existing //  
existsRegistryValue(id = "c/d/e")
try(existsRegistryValue(id = "c/d/e", strict = 1))
try(existsRegistryValue(id = "c/d/e", strict = 2))

##------------------------------------------------------------------------------
## Explicit `where` //
##------------------------------------------------------------------------------

where <- new.env()
setRegistryValue(id = "a/b/c", value = 10, where = where)
existsRegistryValue(id = "a/b/c", where = where)
existsRegistryValue(id = "a/b/c/d", where = where)
existsRegistryValue(id = "c/d/e", where = where)

##------------------------------------------------------------------------------
## Sub ID //
##------------------------------------------------------------------------------

where <- new.env()
setRegistryValue(id = "a/b/c", value = 10, where = where, sub_id = "sub")
existsRegistryValue(id = "a/b/c", where = where, sub_id = "sub")
existsRegistryValue(id = "a/b/c/d", where = where, sub_id = "sub")
existsRegistryValue(id = "c/d/e", where = where, sub_id = "sub")

}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
  	\link[optionr]{existsRegistryValue-char-char-method},
   \link[optionr]{setRegistryValue},
   \link[optionr]{rmRegistryValue}
}
}

