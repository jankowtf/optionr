% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{setAnywhereOption,character,ANY,missing-method}
\alias{setAnywhereOption,character,ANY,missing-method}
\alias{setAnywhereOption-char-any-miss-method}
\title{Set Anywhere Option (char-any-miss)}
\usage{
\S4method{setAnywhereOption}{character,ANY,missing}(id, value,
  where = tryCatch(devtools::as.package(".")$package, error = function(cond) {
      stop("Invalid default value for `where`") }), fail_value = NULL,
  force = FALSE, gap = TRUE, must_exist = FALSE, reactive = FALSE,
  return_status = TRUE, strict = c(0, 1, 2), typed = FALSE, ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{value}{\code{\link{ANY}}.}

\item{where}{\code{\link{missing}}.}

\item{fail_value}{\code{\link{ANY}}.
Value that is returned if assignment failed and \code{return_status = FALSE}.}

\item{force}{\code{\link{logical}}.
\code{TRUE}: when \code{dirname(id)} points to a \emph{leaf} instead of a
\emph{branch} (i.e. \code{dirname(id)} is not an \code{environment}),
overwrite it to turn it into a branch and vice versa when \code{id} points
to a branch that is to be transformed into a leaf;
\code{FALSE}: either return with \code{fail_value} or signal condition
depending on value of \code{strict}.}

\item{gap}{\code{\link{logical}}.
\code{TRUE}: when \code{dirname(id)} points to a non-existing parent
branch or if there are any missing branches in the nested structure,
then auto-create all missing branches;
\code{FALSE}: either return with \code{fail_value} or throw a condition
 in such cases (depending on \code{strict});}

\item{must_exist}{\code{\link{logical}}.
\code{TRUE}: \code{id} pointing to a non-existing option object either results
in return value \code{fail_value} or signal a condition
depending on \code{strict};
\code{FALSE}: option object that \code{id} points to is set.}

\item{reactive}{\code{\link{logical}}.
\code{TRUE}: set reactive option object via
\code{\link[reactr]{setShinyReactive}}.
\code{FALSE}: set regular/non-reactive option object value.
Note that if \code{value} inherits from \code{ReactiveExpression}
(which it does if \code{\link[reactr]{reactiveExpression}} or wrappers
around this function are used), \code{reactive} is
automatically set to \code{TRUE}.}

\item{return_status}{\code{\link{logical}}.
   \code{TRUE}: return status (\code{TRUE} for successful assignment,
         \code{FALSE} for failed assignment);
\code{FALSE}: return actual assignment value (\code{value}) or
\code{fail_value}.}

\item{strict}{\code{\link{logical}}.
     Controls what happens when \code{id} points to a non-existing option object:
\itemize{
         \item{0: }{ignore and return \code{FALSE} to signal that the
             assignment process was not successful or \code{fail_value} depending
             on the value of \code{return_status}}
         \item{1: }{ignore and with warning and return \code{FALSE}}
         \item{2: }{ignore and with error}
   }}

\item{typed}{\code{\link{logical}}.
\code{TRUE}: create an implicitly typed option object;
\code{FALSE}: create a regular option object.}
}
\value{
See method
   \code{\link{setAnywhereOption-char-any-char-method}}.
}
\description{
See generic: \code{\link[optionr]{setAnywhereOption}}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Basics //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)

## Simple name/ID //
setAnywhereOption(id = "test", value = TRUE)
getAnywhereOption(id = "test")

## Path-like name/ID //
setAnywhereOption(id = "test", value = new.env())
## --> note that `test` is overwritten and thus transformed from a "leaf"
## to a "branch" component (i.e. an environment)
getAnywhereOption(id = "test")
ls(getAnywhereOption(id = "test"))

setAnywhereOption(id = "test/a", value = TRUE)
ls(getAnywhereOption(id = "test"))
getAnywhereOption(id = "test/a")

## Must exist //
setAnywhereOption(id = "test/b", value = TRUE, must_exist = TRUE)
try(setAnywhereOption(id = "test/b", value = TRUE, must_exist = TRUE, strict = 2))

## Typed //
setAnywhereOption(id = "test/c", value = "hello world!", typed = TRUE)
setAnywhereOption(id = "test/c", value = 1:3)
## --> wrong class, but `strict = 0` --> disregarded without warning or error
getAnywhereOption(id = "test/c")
## --> still `hello world!` because `value = 1:3` had wrong class

setAnywhereOption(id = "test/c", value = "hello world!", typed = TRUE, strict = 1)
try(setAnywhereOption(id = "test/c", value = 1:3))
## --> warning and no assignment
getAnywhereOption(id = "test/c")
## --> still `hello world!`

setAnywhereOption(id = "test/c", value = "hello world!", typed = TRUE, strict = 2)
try(setAnywhereOption(id = "test/c", value = 1:3))
## --> error
getAnywhereOption(id = "test/c")
## --> still `hello world!`

setAnywhereOption(id = "test/a", value = "something else")
## --> correct class --> value changed 
getAnywhereOption(id = "test/a")
  
##------------------------------------------------------------------------------
## Numerical names/IDs //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)
setAnywhereOption(id = "20140101", value = TRUE)
ls(container, all.names = TRUE)
getAnywhereOption(id = "20140101")

##------------------------------------------------------------------------------
## Branch gaps //
##------------------------------------------------------------------------------
  
container <- initializeOptionContainer(overwrite = TRUE)
setAnywhereOption(id = "a/b/c/d", value = TRUE)
try(setAnywhereOption(id = "a/b/c/d", value = TRUE, strict = 2))
## --> branch gap: branches a, b and c do not exist yet

## Closing the gap //
setAnywhereOption(id = "a/b/c/d", value = TRUE)

## Inspect //
ls(container)
getAnywhereOption(id = "a")
getAnywhereOption(id = "a/b")
getAnywhereOption(id = "a/b/c")
getAnywhereOption(id = "a/b/c/d")

##------------------------------------------------------------------------------
## Forcing leafs to branches //
##------------------------------------------------------------------------------
  
container <- initializeOptionContainer(overwrite = TRUE)
setAnywhereOption(id = "a", value = "hello world!")
setAnywhereOption(id = "a/b", value = 10)
try(setAnywhereOption(id = "a/b", value = 10, strict = 2))
## --> starting branch `a` is not an environment 
getAnywhereOption(id = "a")

## Forcing leaf into a branch //
setAnywhereOption(id = "a/b", value = 10, force = TRUE)
getAnywhereOption(id = "a")
getAnywhereOption(id = "a/b")

##------------------------------------------------------------------------------
## Different `where` //
##------------------------------------------------------------------------------

where <- "test"
container <- initializeOptionContainer(id = where, overwrite = TRUE)
setAnywhereOption(id = "a/b/c", value = 10, where = where)
getAnywhereOption(id = "a/b/c", where = where)
identical(getOptionContainer(where), container)
exists("a", container)

where <- structure(list(id = "test"), class = "OptionContext.Test")
container <- initializeOptionContainer(id = where, overwrite = TRUE)
setAnywhereOption(id = "a/b/c", value = 10, where = where)
getAnywhereOption(id = "a/b/c", where = where)
identical(getOptionContainer(where), container)
exists("a", container)

##------------------------------------------------------------------------------
## Reactive options: simple name/ID //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)  
setAnywhereOption(id = "x_1", value = TRUE, reactive = TRUE)
setAnywhereOption(
  id = "x_2", 
  value = reactiveOption(!getAnywhereOption(id = "x_1"))
)
## `x_2` should always be the opposite of `x_1`
## Note that you can ommit `reactive = TRUE` when `value = reactiveOption(...)`

getAnywhereOption(id = "x_1")
getAnywhereOption(id = "x_2")

## Changing via options //
setAnywhereOption(id = "x_1", value = FALSE)
getAnywhereOption(id = "x_1")
getAnywhereOption(id = "x_2")

## When changed manually //
container <- getOptionContainer()
container$x_1 <- TRUE
container$x_1
container$x_2

## Trying to change bound variable //
setAnywhereOption(id = "x_2", value = TRUE)
getAnywhereOption(id = "x_2")
## --> has no effect; warning and error behavior can be specified via `strict`

##------------------------------------------------------------------------------
## Reactive options: path-like name/ID //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)
setAnywhereOption(id = "a/test", value = TRUE, reactive = TRUE)
setAnywhereOption(id = "b/test", 
  value = reactiveOption(!getAnywhereOption(id = "a/test"))
)

getAnywhereOption(id = "a/test")  
getAnywhereOption(id = "b/test")
setAnywhereOption(id = "a/test", value = FALSE)
getAnywhereOption(id = "a/test")
getAnywhereOption(id = "b/test")
  
}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
   \link[optionr]{setAnywhereOption}
}
}

