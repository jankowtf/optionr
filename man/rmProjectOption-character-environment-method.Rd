% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{rmProjectOption,character,environment-method}
\alias{rmProjectOption,character,environment-method}
\alias{rmProjectOption-char-env-method}
\title{Remove Project Option (char-env)}
\usage{
\S4method{rmProjectOption}{character,environment}(id,
  where = tryCatch(devtools::as.package(".")$package, error = function(cond) {
      stop("Invalid default value for `where`") }), sub_id = character(),
  strict = c(0, 1, 2), ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{where}{\code{\link{environment}}.}

\item{sub_id}{\code{\link{character}}.
Optional ID for a sub layer. Useful for a hub-like option container
structure.}

\item{strict}{\code{\link{logical}}.
 Controls what happens when \code{id} points to a non-existing option object:
\itemize{
   \item{0: }{ignore and return \code{FALSE} to signal that the
             assignment process was not successful or \code{fail_value} depending
             on the value of \code{return_status}}
         \item{1: }{ignore and with warning and return \code{FALSE}}
         \item{2: }{ignore and with error}
   }}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
See method
   \code{\link[optionr]{rmProjectOption-char-char-method}}
}
\description{
See generic: \code{\link[optionr]{rmProjectOption}}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default `where` //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)
setProjectOption(id = "a", value = TRUE)
rmProjectOption(id = "a")
exists("a", container$options, inherits = FALSE)

setProjectOption(id = "a/b/c", value = 10)
rmProjectOption(id = "a/b/c")
exists("c", container$options$a$b, inherits = FALSE)

##------------------------------------------------------------------------------
## Different `where` //
##------------------------------------------------------------------------------
  
where <- "test"
container <- initializeOptionContainer(id = where, overwrite = TRUE)
".test" \%in\% names(options())
setProjectOption(id = "a/b/c", value = 10, where = where)
rmProjectOption(id = "a/b/c", where = where)
exists("c", container$options$a$b, inherits = FALSE)
  
where <- structure(list(id = "test"), class = "OptionContext.Test")
container <- initializeOptionContainer(id = where, overwrite = TRUE)
".test" \%in\% names(options())
setProjectOption(id = "a/b/c", value = 10, where = where)
rmProjectOption(id = "a/b/c", where = where)
exists("c", container$options$a$b, inherits = FALSE)

##------------------------------------------------------------------------------
## Strictness //
##------------------------------------------------------------------------------
  
container <- initializeOptionContainer(overwrite = TRUE)
rmProjectOption(id = "a")
try(rmProjectOption(id = "a", strict = 2))

rmProjectOption(id = "a/b/c")
try(rmProjectOption(id = "a/b/c", strict = 2))

rmProjectOption(id = character())
try(rmProjectOption(id = character(), strict = 2))
    
}

}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
   \link[optionr]{rmProjectOption}
}
}

