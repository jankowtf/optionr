% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{rmRegistryValue,character,character-method}
\alias{rmRegistryValue,character,character-method}
\alias{rmRegistryValue-char-miss-method}
\title{Remove Registry Value (char-char)}
\usage{
\S4method{rmRegistryValue}{character,character}(id,
  where = tryCatch(devtools::as.package(".")$package, error = function(cond) {
      stop("Invalid default value for `where`") }), strict = FALSE, ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{where}{\code{\link{character}}.}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: the following constellations trigger an error:
\itemize{
    \item{\code{id} pointing to a non-existing option}
    \item{empty \code{id}}
}
\code{FALSE}: the stated constellations lead to the return value
being \code{FALSE}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{ANY}}. Option value or for non-existing option
   (i.e. wrong \code{id}): \code{NULL} if \code{strict = FALSE} and an error
   if \code{strict = TRUE}.
}
\description{
See generic: \code{\link[optionr]{rmRegistryValue}}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default `where` //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)
setRegistryValue(id = "a", value = TRUE)
rmRegistryValue(id = "a")
exists("a", container$.registry, inherits = FALSE)

setRegistryValue(id = "a/b/c", value = 10, gap = TRUE)
rmRegistryValue(id = "a/b/c")
exists("c", container$.registry$a$b, inherits = FALSE)

##------------------------------------------------------------------------------
## Different `where` //
##------------------------------------------------------------------------------
  
where <- "test"
container <- initializeOptionContainer(id = where, overwrite = TRUE)
".test" \%in\% names(options())
setRegistryValue(id = "a/b/c", value = 10, where = where, gap = TRUE)
rmRegistryValue(id = "a/b/c", where = where)
exists("c", container$.registry$a$b, inherits = FALSE)
  
where <- structure(list(id = "test"), class = "OptionContext.Test")
container <- initializeOptionContainer(id = where, overwrite = TRUE)
".test" \%in\% names(options())
setRegistryValue(id = "a/b/c", value = 10, where = where, gap = TRUE)
rmRegistryValue(id = "a/b/c", where = where)
exists("c", container$.registry$a$b, inherits = FALSE)

##------------------------------------------------------------------------------
## Strictness //
##------------------------------------------------------------------------------
  
container <- initializeOptionContainer(overwrite = TRUE)
rmRegistryValue(id = "a")
try(rmRegistryValue(id = "a", strict = TRUE))

rmRegistryValue(id = "a/b/c")
try(rmRegistryValue(id = "a/b/c", strict = TRUE))

rmRegistryValue(id = character())
try(rmRegistryValue(id = character(), strict = TRUE))
    
}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
   \link[optionr]{rmRegistryValue}
}
}

