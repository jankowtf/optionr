% Generated by roxygen2 (4.0.2): do not edit by hand
\name{rmMetaValue}
\alias{rmMetaValue}
\title{Remove Meta Value (generic)}
\usage{
rmMetaValue(id, where = tryCatch(devtools::as.package(".")$package, error =
  function(cond) {     stop("Invalid default value for `where`") }),
  strict = FALSE, ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like name/ID information.}

\item{where}{\strong{Signature argument}.
Object containing information about the location of the option container
that is to be used. Typically, this either corresponds to the name/ID
of a package/package project or an instance of a custom class for which
suitable methods in the context of managing options are defined
(see other methods of this package that have signature arguments
\code{id} or \code{where}).}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: the following constellations trigger an error:
\itemize{
    \item{\code{id} pointing to a non-existing option}
    \item{empty \code{id}}
}
\code{FALSE}: the stated constellations lead to the return value
being \code{FALSE}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Removes meta value from the respective environment containing meta
information (see \code{\link[optionr]{initializeOptionContainer}}).
}
\section{Path-like identifiers}{


Values for \code{id} are expected to be of structure \code{a/b/c/.../z},
i.e. path-like identifiers using a slash as separator.
The identifier is transformed to \code{a$b$c$...$z} and then in turn to a
valid \emph{get} or \code{assign} expression
(i.e. something similar to \code{getOptionContainer(...)$a$b$c$...$z} and
\code{getOptionContainer(...)$a$b$c$...$z <- value}).
Of course, "atomic" paths (e.g. only \code{a}) are also valid.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default `where` //
##------------------------------------------------------------------------------

container <- initializeOptionContainer(overwrite = TRUE)
setMetaValue(id = "a", value = TRUE)
rmMetaValue(id = "a")
exists("a", container$.meta, inherits = FALSE)

setMetaValue(id = "a/b/c", value = 10, gap = TRUE)
rmMetaValue(id = "a/b/c")
exists("c", container$.meta$a$b, inherits = FALSE)

##------------------------------------------------------------------------------
## Different `where` //
##------------------------------------------------------------------------------
  
where <- "test"
container <- initializeOptionContainer(id = where, overwrite = TRUE)
".test" \%in\% names(options())
setMetaValue(id = "a/b/c", value = 10, where = where, gap = TRUE)
rmMetaValue(id = "a/b/c", where = where)
exists("c", container$.meta$a$b, inherits = FALSE)
  
where <- structure(list(id = "test"), class = "OptionContext.Test")
container <- initializeOptionContainer(id = where, overwrite = TRUE)
".test" \%in\% names(options())
setMetaValue(id = "a/b/c", value = 10, where = where, gap = TRUE)
rmMetaValue(id = "a/b/c", where = where)
exists("c", container$.meta$a$b, inherits = FALSE)

##------------------------------------------------------------------------------
## Strictness //
##------------------------------------------------------------------------------
  
container <- initializeOptionContainer(overwrite = TRUE)
rmMetaValue(id = "a")
try(rmMetaValue(id = "a", strict = TRUE))

rmMetaValue(id = "a/b/c")
try(rmMetaValue(id = "a/b/c", strict = TRUE))

rmMetaValue(id = character())
try(rmMetaValue(id = character(), strict = TRUE))
    
}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
  	\link[optionr]{rmMetaValue-char-char-method},
    \link[optionr]{setMetaValue},
    \link[optionr]{getMetaValue}
}
}

