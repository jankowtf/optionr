% Generated by roxygen2 (4.0.2): do not edit by hand
\name{initializeOptionContainer}
\alias{initializeOptionContainer}
\title{Initialize Option Container (generic)}
\usage{
initializeOptionContainer(id = tryCatch(devtools::as.package(".")$package,
  error = function(cond) {     stop("Invalid default value for `id`") }),
  components = c("options", ".meta", ".registry"), check = TRUE,
  hidden = TRUE, overwrite = FALSE, ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing suitable information to control the distinct creation
process.
In the simplest case, this corresponds
to the name/ID of a package/package project. But it can also be an
instance of a class for which methods for
\code{\link[optionr]{initializeProjectOptions}},
\code{\link[optionr]{initializeMeta}} and
\code{\link[optionr]{initializeRegistry}} exist.}

\item{check}{\code{\link{logical}}.
\code{TRUE}: check if an R option with name/ID according to the information
in \code{id} already exists (in which case an error is thrown);
\code{FALSE}: no check for existing R options.
Note that \code{overwrite} will overrule \code{check}.}

\item{hidden}{\code{\link{logical}}.
\code{TRUE}: make sure name/ID information in \code{id}
is preprended with a dot to hide it;
\code{FALSE}: use name/ID information in \code{id} as is.
The former reduces the risk of accidentially overwriting existing R
options and thus is used by default.}

\item{overwrite}{\code{\link{logical}}.
\code{TRUE}: overwrite existing container;
\code{FALSE}: create only if no container exists yet.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Convenience function to initialize the option container that is then stored
as an R option according to the name/ID provided by \code{id}.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default `id` //
##------------------------------------------------------------------------------
  
## Make sure initial options are `NULL` //
options("optionr" = NULL)

initializeOptionContainer()
opts <- getOption("optionr")
opts$options  
opts$.meta  
opts$.registry  

## Clean up //
options("optionr" = NULL)

##------------------------------------------------------------------------------
## Explicit character `id` //
##------------------------------------------------------------------------------
  
id <- "test"
options(id = NULL)

initializeOptionContainer(id)
opts <- getOption(id)
opts$options  
opts$.meta  
opts$.registry

## Clean up //
options(id = NULL)
  
##------------------------------------------------------------------------------
## Partial 
##------------------------------------------------------------------------------

id <- "test"
options(id = NULL)
initializeOptionContainer(id, components = "options")
opts <- getOption(id)
opts$options  
opts$.meta
## --> not created
opts$.registry
## --> not created

initializeOptionContainer(id, components = c("options", ".meta"), 
  overwrite = TRUE)
opts <- getOption(id)
opts$options  
opts$.meta
opts$.registry
## --> not created

## Condition handling //
initializeOptionContainer(id, components = c("nonexisting", "options"), 
  overwrite = TRUE)
opts <- getOption(id)
ls(opts, all.names = TRUE)

## Clean up //
options(id = NULL)
  
##------------------------------------------------------------------------------
## As interface //
##------------------------------------------------------------------------------

## Example of how custom classes can be used for creating custom methods //
id <- structure(list(id = "test"), class = "OptionContext.Test")
id

options("test" = NULL)
initializeOptionContainer(id)
## --> calls `initializeProjectOptions()`, `initializeMeta()` and `initializeRegistry()`
## and for each of which methods for signature `id` can be defined

getOption(id$id)$options  
getOption(id$id)$.meta  
getOption(id$id)$.registry  
options("test" = NULL)

}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
  	\link[optionr]{initializeOptionContainer-char-method},
    \link[optionr]{ensureOptionContainer},
    \link[optionr]{getOptionContainer}
}
}

