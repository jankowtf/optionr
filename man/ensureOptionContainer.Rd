% Generated by roxygen2 (4.0.2): do not edit by hand
\name{ensureOptionContainer}
\alias{ensureOptionContainer}
\title{Ensure Option Container (generic)}
\usage{
ensureOptionContainer(id = tryCatch(devtools::as.package(".")$package, error =
  function(cond) {     stop("Invalid default value for `id`") }),
  container = new.env(), check = TRUE, hidden = TRUE, overwrite = FALSE,
  ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing suitable information to control the actual ensurance
process.
In the simplest case, this corresponds
to the name/ID of a package/package project. But it can also be an
instance of a custom class for which a suitable methods are defined.}

\item{container}{\strong{Signature argument}.
Object containing container information.}

\item{check}{\code{\link{logical}}.
\code{TRUE}: check if an R option with name/ID according to the information
in \code{id} already exists (in which case an error is thrown);
\code{FALSE}: no check for existing R options.
Note that \code{overwrite} will overrule \code{check}.}

\item{hidden}{\code{\link{logical}}.
\code{TRUE}: make sure name/ID information in \code{id}
is preprended with a dot to hide it;
\code{FALSE}: use name/ID information in \code{id} as is.
The former reduces the risk of accidentially overwriting existing R
options and thus is used by default.}

\item{overwrite}{\code{\link{logical}}.
\code{TRUE}: overwrite existing container;
\code{FALSE}: keep existing container.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Ensures the existence of an \code{environment} that serves as an option
container. The container will be assigned to R option based on signature
argument \code{id}.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default `id` //
##------------------------------------------------------------------------------

options(".optionr" = NULL)
res <- ensureOptionContainer()
".optionr" \%in\% names(options())
ensureOptionContainer(overwrite = TRUE)
identical(getOption(".optionr"), res)
## --> identical environment object is reused --> ensures pass-by-references
## keeps working even when `overwrite = TRUE`

## Clean up //
options(".optionr" = NULL)

##------------------------------------------------------------------------------
## Not hidden //
##------------------------------------------------------------------------------

options("optionr" = NULL)
res <- ensureOptionContainer(hide = FALSE)
"optionr" \%in\% names(options())
identical(getOption("optionr"), res)

## Clean up //
options("optionr" = NULL)

##------------------------------------------------------------------------------
## Check for existing options of same name/ID //
##------------------------------------------------------------------------------

options(".optionr" = NULL)
res <- ensureOptionContainer()
try(ensureOptionContainer(check = TRUE))

## Clean up //
options(".optionr" = NULL)

##------------------------------------------------------------------------------
## As interface //
##------------------------------------------------------------------------------
  
id <- structure(list(id = "test"), class = "OptionContext.Test")
options("test" = NULL)

res <- ensureOptionContainer(id, hide = FALSE)
"test" \%in\% names(options())
identical(getOption(id$id), res)  

## Clean up //
options("test" = NULL)

}
}
\author{
Who to complain to \email{yourfault@somewhere.net}
}
\references{
\url{http://github.com/whotocomplainto/test.package}
}
\seealso{
\code{
  	\link[rapp]{ensureOptionContainer-missing-method}
}
}

