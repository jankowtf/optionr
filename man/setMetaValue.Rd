% Generated by roxygen2 (4.0.2): do not edit by hand
\name{setMetaValue}
\alias{setMetaValue}
\title{Set Meta Value (generic)}
\usage{
setMetaValue(id, value, where = tryCatch(devtools::as.package(".")$package,
  error = function(cond) {     stop("Invalid default value for `where`") }),
  must_exist = FALSE, typed = FALSE, force = FALSE, gap = FALSE,
  strict = FALSE, reactive = FALSE, ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like ID information.}

\item{value}{\strong{Signature argument}.
Object containing value information.}

\item{where}{\strong{Signature argument}.
Object containing information about the location of the option container
that is to be used. Typically, this either corresponds to the name/ID
of a package/package project or an instance of a custom class for which
suitable methods in the context of managing options are defined
(see other methods of this package that have signature arguments
\code{id} or \code{where}).}

\item{must_exist}{\code{\link{logical}}.
\code{TRUE}: \code{id} pointing to a non-existing option either triggers
an error or results in return value \code{FALSE} (depending on \code{strict});
\code{FALSE}: option that \code{id} points to is set.}

\item{typed}{\code{\link{logical}}.
Implies that \code{must_exist} is automatically set to \code{TRUE}.
\code{TRUE}: \code{class(value)} must match the class of the existing
option value;
\code{FALSE}: option that \code{id} points to is set without class check.}

\item{force}{\code{\link{logical}}.
\code{TRUE}: when \code{dirname(id)} points to a \emph{leaf} instead of a
\emph{branch} (i.e. \code{dirname(id)} is not an \code{environment}),
overwrite it to turn it into a branch;
\code{FALSE}: either return with \code{FALSE} or throw error in such cases
(depending on value of \code{strict});}

\item{gap}{\code{\link{logical}}.
\code{TRUE}: when \code{dirname(id)} points to a non-existing parent
branch or if there are any missing branches in the path tree,
then auto-create all missing branches;
\code{FALSE}: either return with \code{FALSE} or throw error in such cases
(depending on \code{strict});}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: \code{id} pointing to a non-existing option triggers
error; \code{FALSE}: \code{id} pointing to a non-existing option leads
to return value \code{NULL}.}

\item{reactive}{\code{\link{logical}}.
\code{TRUE}: set reactive option via
\code{\link[optionr]{setReactive}} or \code{\link[optionr]{setShinyReactive}}.
\code{FALSE}: set regular/non-reactive option.
Note that if \code{value = reactiveOption()}, \code{reactive} is automatically
set to \code{TRUE}.}

\item{Further}{arguments to be passed along to subsequent functions.
In particular:
\code{\link[optionr]{setShinyReactive}}.}
}
\description{
Sets meta value inside the respective environment for meta information.
}
\section{Path-like identifiers}{


Values for \code{id} are expected to be of structure \code{a/b/c/.../z},
i.e. path-like identifiers using a slash as separator.
The identifier is transformed to \code{a$b$c$...$z} and then in turn to a
valid \emph{get} or \code{assign} expression
(i.e. something similar to \code{getOptionContainer(...)$a$b$c$...$z} and
\code{getOptionContainer(...)$a$b$c$...$z <- value}).
Of course, "atomic" paths (e.g. only \code{a}) are also valid.
}
\examples{
\dontrun{

## TODO: add example

}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
  	\link[optionr]{setMetaValue-char-any-char-method},
    \link[optionr]{getMetaValue},
    \link[optionr]{rmMetaValue}
}
}

