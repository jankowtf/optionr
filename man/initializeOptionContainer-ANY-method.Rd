% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{initializeOptionContainer,ANY-method}
\alias{initializeOptionContainer,ANY-method}
\alias{initializeOptionContainer-any-method}
\title{Initialize Option Container (any)}
\usage{

  \S4method{initializeOptionContainer}{ANY}(id = tryCatch(devtools::as.package(".")$package,
  error = function(cond) {     stop("Invalid default value for `id`") }),
  sub_id = character(), components = c("options", ".meta", ".registry"),
  check = TRUE, hidden = TRUE, overwrite = FALSE, ...)
}
\arguments{
\item{id}{\code{\link{ANY}}.}

\item{sub_id}{\code{\link{character}}.
Optional ID for a sub layer. Useful for a hub-like option container
structure.}

\item{check}{\code{\link{logical}}.
\code{TRUE}: check if an R option with name/ID according to the information
in \code{id} already exists (in which case an error is thrown);
\code{FALSE}: no check for existing R options.
Note that \code{overwrite} will overrule \code{check}.}

\item{hidden}{\code{\link{logical}}.
\code{TRUE}: make sure name/ID information in \code{id}
is preprended with a dot to hide it;
\code{FALSE}: use name/ID information in \code{id} as is.
The former reduces the risk of accidentially overwriting existing R
options and thus is used by default.}

\item{overwrite}{\code{\link{logical}}.
\code{TRUE}: overwrite existing container;
\code{FALSE}: create only if no container exists yet.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{environment}}. The option container.
}
\description{
See generic: \code{\link[optionr]{initializeOptionContainer}}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default ID //
##------------------------------------------------------------------------------
  
## Make sure initial options are `NULL` //
options("optionr" = NULL)

id_hidden <- paste0(".", devtools::as.package(".")$package)
initializeOptionContainer()
opts <- getOption(id_hidden)
opts$options  
opts$.meta  
opts$.registry  

## Clean up //
options(id_hidden = NULL)

##------------------------------------------------------------------------------
## Explicit ID //
##------------------------------------------------------------------------------
  
id <- "test"
id_hidden <- paste0(".", id)
options(id = NULL)

initializeOptionContainer(id)
opts <- getOption(id_hidden)
opts$options  
opts$.meta  
opts$.registry

## Clean up //
options(id_hidden = NULL)

##------------------------------------------------------------------------------
## Sub ID //
##------------------------------------------------------------------------------
  
id <- "test"
id_hidden <- paste0(".", id)
sub_id <- "a"
options(id = NULL)

initializeOptionContainer(id = id, sub_id = sub_id)
opts <- getOption(id_hidden)
"a" \%in\% ls(opts)
opts[[sub_id]]$options  
opts[[sub_id]]$.meta  
opts[[sub_id]]$.registry

## Clean up //
options(id_hidden = NULL)
  
##------------------------------------------------------------------------------
## Partial 
##------------------------------------------------------------------------------

id <- "test"
id_hidden <- paste0(".", id)
options(id_hidden = NULL)
initializeOptionContainer(id, components = "options")
opts <- getOption(id_hidden)
opts$options  
opts$.meta
## --> not created
opts$.registry
## --> not created

initializeOptionContainer(id, components = c("options", ".meta"), 
  overwrite = TRUE)
opts <- getOption(id_hidden)
opts$options  
opts$.meta
opts$.registry
## --> not created

## Condition handling //
initializeOptionContainer(id, components = c("nonexisting", "options"), 
  overwrite = TRUE)
opts <- getOption(id_hidden)
ls(opts, all.names = TRUE)

## Clean up //
options(id_hidden = NULL)
  
##------------------------------------------------------------------------------
## As interface //
##------------------------------------------------------------------------------

## Example of how custom classes can be used for creating custom methods //
id <- structure(list(id = "test"), class = "OptionContext.Test")
id
id_hidden <- paste0(".", id$id)

options(id_hidden = NULL)
initializeOptionContainer(id)
## --> calls `initializeProjectOptions()`, `initializeMeta()` and `initializeRegistry()`
## and for each of which methods for signature ID can be defined

getOption(id_hidden)$options  
getOption(id_hidden)$.meta  
getOption(id_hidden)$.registry  
options(id_hidden = NULL)

}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/Rappster/optionr}
}
\seealso{
\code{
   \link[optionr]{initializeOptionContainer}
}
}

